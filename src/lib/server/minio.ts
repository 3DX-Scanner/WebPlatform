import * as Minio from 'minio';
import { env } from '$env/dynamic/private';
import { Readable } from 'stream';
import * as fs from 'fs';
import * as path from 'path';

// Configuration MinIO
const minioConfig = {
	endPoint: env.MINIO_ENDPOINT || 'localhost',
	port: parseInt(env.MINIO_PORT || '9000'),
	useSSL: env.MINIO_USE_SSL === 'true',
	accessKey: env.MINIO_ACCESS_KEY || 'admin',
	secretKey: env.MINIO_SECRET_KEY || 'admin12345'
};

// Client MinIO
export const minioClient = new Minio.Client(minioConfig);

// Nom du bucket public pour les mod√®les de d√©mo
export const PUBLIC_BUCKET = 'public';

/**
 * Initialise le bucket public MinIO s'il n'existe pas
 */
export async function initializeBuckets() {
	try {
		const exists = await minioClient.bucketExists(PUBLIC_BUCKET);
		if (!exists) {
			await minioClient.makeBucket(PUBLIC_BUCKET, 'us-east-1');
			console.log(`‚úÖ Bucket public cr√©√©: ${PUBLIC_BUCKET}`);

			// D√©finir la politique publique pour lecture seule
			const policy = {
				Version: '2012-10-17',
				Statement: [
					{
						Effect: 'Allow',
						Principal: { AWS: ['*'] },
						Action: ['s3:GetObject'],
						Resource: [`arn:aws:s3:::${PUBLIC_BUCKET}/*`]
					}
				]
			};
			await minioClient.setBucketPolicy(PUBLIC_BUCKET, JSON.stringify(policy));
			console.log(`‚úÖ Politique publique appliqu√©e au bucket: ${PUBLIC_BUCKET}`);
		} else {
			console.log(`‚úì Bucket public existe d√©j√†: ${PUBLIC_BUCKET}`);
		}
	} catch (error) {
		console.error('‚ùå Erreur lors de l\'initialisation du bucket public MinIO:', error);
		throw error;
	}
}

/**
 * Cr√©e un bucket pour un utilisateur s'il n'existe pas
 */
export async function ensureUserBucket(userId: number): Promise<string> {
	const bucketName = `user-${userId}`;
	
	try {
		const exists = await minioClient.bucketExists(bucketName);
		if (!exists) {
			await minioClient.makeBucket(bucketName, 'us-east-1');
			console.log(`‚úÖ Bucket utilisateur cr√©√©: ${bucketName}`);
		}
		return bucketName;
	} catch (error) {
		console.error(`‚ùå Erreur lors de la cr√©ation du bucket ${bucketName}:`, error);
		throw error;
	}
}
/**
 * Upload un fichier dans MinIO
 */
export async function uploadFile(
	bucketName: string,
	objectName: string,
	stream: Buffer | NodeJS.ReadableStream | ReadableStream,
	size?: number,
	metaData?: Record<string, string>
) {
	try {
		// Ensure we provide a Node.js Readable (or Buffer/string) to minioClient.putObject
		let nodeStream: Buffer | NodeJS.ReadableStream | string = stream as any;

		// Detect WHATWG ReadableStream (browser/fetch) and convert to Node Readable
		if (typeof (stream as any)?.getReader === 'function') {
			// If Node.js provides Readable.fromWeb (Node 17.0+ / 18+), use it
			if (typeof (Readable as any).fromWeb === 'function') {
				nodeStream = (Readable as any).fromWeb(stream as any);
			} else {
				// Fallback: create a Node Readable that pulls from the reader
				const reader = (stream as any).getReader();
				nodeStream = new Readable({
					read() {
						// noop: we'll push in an async loop below
					}
				});

				(async () => {
					try {
						while (true) {
							const { done, value } = await reader.read();
							if (done) {
								(nodeStream as Readable).push(null);
								break;
							}
							// value may be Uint8Array or similar
							(nodeStream as Readable).push(Buffer.from(value));
						}
					} catch (err) {
						(nodeStream as Readable).destroy(err as Error);
					}
				})();
			}
		}

		await minioClient.putObject(bucketName, objectName, nodeStream as any, size, metaData);
		return {
			success: true,
			bucket: bucketName,
			objectName,
			url: `http://${minioConfig.endPoint}:${minioConfig.port}/${bucketName}/${objectName}`
		};
	} catch (error) {
		console.error('‚ùå Erreur lors de l\'upload:', error);
		throw error;
	}
}

/**
 * T√©l√©charge un fichier depuis MinIO
 */
export async function downloadFile(bucketName: string, objectName: string) {
	try {
		const dataStream = await minioClient.getObject(bucketName, objectName);
		return dataStream;
	} catch (error) {
		console.error('‚ùå Erreur lors du t√©l√©chargement:', error);
		throw error;
	}
}

/**
 * Supprime un fichier de MinIO
 */
export async function deleteFile(bucketName: string, objectName: string) {
	try {
		await minioClient.removeObject(bucketName, objectName);
		return { success: true };
	} catch (error) {
		console.error('‚ùå Erreur lors de la suppression:', error);
		throw error;
	}
}

/**
 * Liste les fichiers dans un bucket
 */
export async function listFiles(bucketName: string, prefix?: string) {
	try {
		const stream = minioClient.listObjects(bucketName, prefix, true);
		const files: any[] = [];

		return new Promise<any[]>((resolve, reject) => {
			stream.on('data', (obj) => files.push(obj));
			stream.on('error', (err) => reject(err));
			stream.on('end', () => resolve(files));
		});
	} catch (error) {
		console.error('‚ùå Erreur lors du listage des fichiers:', error);
		throw error;
	}
}

/**
 * G√©n√®re une URL pr√©sign√©e pour acc√©der temporairement √† un fichier priv√©
 */
export async function getPresignedUrl(
	bucketName: string,
	objectName: string,
	expirySeconds: number = 3600
) {
	try {
		const url = await minioClient.presignedGetObject(bucketName, objectName, expirySeconds);
		return url;
	} catch (error) {
		console.error('‚ùå Erreur lors de la g√©n√©ration de l\'URL pr√©sign√©e:', error);
		throw error;
	}
}

/**
 * G√©n√®re une URL pr√©sign√©e pour uploader un fichier
 */
export async function getPresignedUploadUrl(
	bucketName: string,
	objectName: string,
	expirySeconds: number = 3600
) {
	try {
		const url = await minioClient.presignedPutObject(bucketName, objectName, expirySeconds);
		return url;
	} catch (error) {
		console.error('‚ùå Erreur lors de la g√©n√©ration de l\'URL pr√©sign√©e d\'upload:', error);
		throw error;
	}
}

/**
 * Synchronise les mod√®les 3D du dossier static vers MinIO
 * V√©rifie qu'il n'y a pas de doublons avant d'uploader
 */
export async function syncStaticModelsToMinio() {
	const staticModelsPath = path.join(process.cwd(), 'static', 'assets', 'model3D');
	
	// V√©rifier si le dossier existe
	if (!fs.existsSync(staticModelsPath)) {
		console.log('üìÅ Aucun dossier static/assets/model3D/ trouv√©, synchronisation ignor√©e');
		return;
	}

	try {
		console.log('üîÑ Synchronisation des mod√®les 3D depuis static/assets/model3D/...');
		
		// Lister les fichiers d√©j√† pr√©sents dans MinIO
		const existingFiles = await listFiles(PUBLIC_BUCKET);
		const existingPaths = new Set(existingFiles.map(f => f.name));
		
		let uploadedCount = 0;
		let skippedCount = 0;

		// Fonction helper pour uploader un fichier
		async function uploadFileToMinio(filePath: string, objectName: string) {
			// V√©rifier si le fichier existe d√©j√†
			if (existingPaths.has(objectName)) {
				skippedCount++;
				return;
			}

			// D√©terminer le Content-Type
			const ext = path.extname(objectName).toLowerCase();
			let contentType = 'application/octet-stream';

			switch (ext) {
				case '.glb':
					contentType = 'model/gltf-binary';
					break;
				case '.gltf':
					contentType = 'model/gltf+json';
					break;
				case '.ply':
					contentType = 'application/octet-stream';
					break;
				case '.jpg':
				case '.jpeg':
					contentType = 'image/jpeg';
					break;
				case '.png':
					contentType = 'image/png';
					break;
				case '.webp':
					contentType = 'image/webp';
					break;
			}

			// Uploader le fichier
			await minioClient.fPutObject(
				PUBLIC_BUCKET,
				objectName,
				filePath,
				{
					'Content-Type': contentType
				}
			);

			uploadedCount++;
			console.log(`  ‚úÖ ${objectName}`);
		}

		// Parcourir tous les fichiers et dossiers
		const items = fs.readdirSync(staticModelsPath);

		for (const item of items) {
			const itemPath = path.join(staticModelsPath, item);
			const stats = fs.statSync(itemPath);

			if (stats.isDirectory()) {
				// C'est un dossier, uploader tous les fichiers qu'il contient
				const files = fs.readdirSync(itemPath);
				for (const file of files) {
					const filePath = path.join(itemPath, file);
					const fileStats = fs.statSync(filePath);
					
					if (fileStats.isFile() && file !== '.gitkeep') {
						const objectName = `${item}/${file}`;
						await uploadFileToMinio(filePath, objectName);
					}
				}
			} else if (stats.isFile() && item !== '.gitkeep') {
				// C'est un fichier √† la racine, cr√©er un dossier bas√© sur le nom du fichier
				const baseName = path.basename(item, path.extname(item));
				const objectName = `${baseName}/${item}`;
				await uploadFileToMinio(itemPath, objectName);
			}
		}

		console.log(`‚úÖ Synchronisation termin√©e: ${uploadedCount} fichiers upload√©s, ${skippedCount} fichiers d√©j√† pr√©sents`);
	} catch (error) {
		console.error('‚ùå Erreur lors de la synchronisation des mod√®les:', error);
		// Ne pas throw pour ne pas bloquer le d√©marrage de l'application
	}
}
